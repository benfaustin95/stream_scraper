//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.6

use sea_orm::entity::prelude::*;
#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "track")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    pub name: String,
    pub album_id: String,
    pub length: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::album::Entity",
        from = "Column::AlbumId",
        to = "super::album::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Album,
    #[sea_orm(has_many = "super::artist_tracks::Entity")]
    ArtistTracks,
    #[sea_orm(has_many = "super::daily_streams::Entity")]
    DailyStreams,
}

impl Related<super::album::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Album.def()
    }
}

impl Related<super::artist_tracks::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ArtistTracks.def()
    }
}

impl Related<super::daily_streams::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::DailyStreams.def()
    }
}

impl Related<super::artist::Entity> for Entity {
    fn to() -> RelationDef {
        super::artist_tracks::Relation::Artist.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::artist_tracks::Relation::Track.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
