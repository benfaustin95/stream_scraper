//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.6

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "artist")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    pub name: String,
    pub images: Vec<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::artist_albums::Entity")]
    ArtistAlbums,
    #[sea_orm(has_many = "super::artist_tracks::Entity")]
    ArtistTracks,
    #[sea_orm(has_many = "super::follower_instance::Entity")]
    FollowerInstance,
    #[sea_orm(has_many = "super::monthly_listeners::Entity")]
    MonthlyListeners,
}

impl Related<super::artist_albums::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ArtistAlbums.def()
    }
}

impl Related<super::artist_tracks::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ArtistTracks.def()
    }
}

impl Related<super::follower_instance::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::FollowerInstance.def()
    }
}

impl Related<super::monthly_listeners::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::MonthlyListeners.def()
    }
}

impl Related<super::album::Entity> for Entity {
    fn to() -> RelationDef {
        super::artist_albums::Relation::Album.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::artist_albums::Relation::Artist.def().rev())
    }
}

impl Related<super::track::Entity> for Entity {
    fn to() -> RelationDef {
        super::artist_tracks::Relation::Track.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::artist_tracks::Relation::Artist.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
